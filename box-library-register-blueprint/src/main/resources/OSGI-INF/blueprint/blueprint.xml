<?xml version="1.0" encoding="UTF-8"?>
<!-- JBoss, Home of Professional Open Source Copyright 2014, Red Hat, Inc. 
	and/or its affiliates, and individual contributors by the @authors tag. See 
	the copyright.txt in the distribution for a full listing of individual contributors. 
	Licensed under the Apache License, Version 2.0 (the "License"); you may not 
	use this file except in compliance with the License. You may obtain a copy 
	of the License at http://www.apache.org/licenses/LICENSE-2.0 Unless required 
	by applicable law or agreed to in writing, software distributed under the 
	License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS 
	OF ANY KIND, either express or implied. See the License for the specific 
	language governing permissions and limitations under the License. -->
<!-- This is the OSGi Blueprint XML file defining the Camel context and routes. 
	Because the file is in the OSGI-INF/blueprint directory inside our JAR, it 
	will be automatically activated as soon as the bundle is installed. The root 
	element for any OSGi Blueprint file is 'blueprint' - you also see the namespace 
	definitions for both the Blueprint and the Camel namespaces. -->
<blueprint xmlns="http://www.osgi.org/xmlns/blueprint/v1.0.0"
    xmlns:cxf="http://camel.apache.org/schema/blueprint/cxf"
    xmlns:jaxws="http://cxf.apache.org/blueprint/jaxws"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://www.osgi.org/xmlns/blueprint/v1.0.0           https://www.osgi.org/xmlns/blueprint/v1.0.0/blueprint.xsd           http://camel.apache.org/schema/blueprint           http://camel.apache.org/schema/blueprint/camel-blueprint.xsd          http://camel.apache.org/schema/blueprint/cxf           http://camel.apache.org/schema/blueprint/cxf/camel-cxf.xsd           http://cxf.apache.org/blueprint/core           http://cxf.apache.org/schemas/blueprint/core.xsd                 http://cxf.apache.org/blueprint/jaxws           http://cxf.apache.org/schemas/blueprint/jaxws.xsd">
    <!-- Adding a <cxf:bus/> definition to the Blueprint XML file is optional: 
		it is only required if you want to specify some additional configuration 
		for the CXF Bus instance used by the service endpoints defined in this XML 
		file. -->
    <bean
        class="org.springframework.jdbc.datasource.SimpleDriverDataSource" id="odsCommonsDS">
        <property name="driverClass" value="oracle.jdbc.driver.OracleDriver"/>
        <property name="url" value="jdbc:oracle:thin:@(DESCRIPTION=(ADDRESS=(PROTOCOL=TCP)(HOST=172.25.139.178)(PORT=1521))(ADDRESS=(PROTOCOL=TCP)(HOST=172.25.139.178)(PORT=1521))(LOAD_BALANCE=yes)(FAILOVER=yes)(CONNECT_DATA=(SERVER=DEDICATED)(SERVICE_NAME=XE)))"/>
        <property name="username" value="ihsan"/>
        <property name="password" value="1234567890"/>
    </bean>
    <cxf:cxfEndpoint
        address="http://localhost:40000/box/library/blueprint/register"
        id="registerEndpoint" serviceClass="org.box.fuse.Registration"/>
    <camelContext id="_context1" xmlns="http://camel.apache.org/schema/blueprint">
        <route id="_route1">
            <from id="_from1" uri="cxf:bean:registerEndpoint"/>
            <recipientList id="_recipientList1">
                <simple>direct:${header.operationName}</simple>
            </recipientList>
        </route>
        <route id="_register">
            <from id="_from2" uri="direct:register"/>
            <log id="_log1" message="registering member data, username: ${body[0].username}, firstname: ${body[0].firstname}, lastname: ${body[0].lastname}"/>
            <to id="_to1" uri="sql:insert into lib_member(username, firstname, lastname) values(:#${body[0].username}, :#${body[0].firstname}, :#${body[0].lastname})?dataSource=odsCommonsDS"/>
            <setBody id="_setBody1">
                <simple>registration for ${body[0].username} has been completed</simple>
            </setBody>
        </route>
        <route id="_unregister">
            <from id="_from3" uri="direct:unregister"/>
            <log id="_log2" message="deleting member with username: ${body[0]}"/>
            <to id="_to2" uri="sql:delete from lib_member where username = :#${body[0]}?dataSource=odsCommonsDS"/>
            <setBody id="_setBody2">
                <simple>${body[0]} sucessfully unregistered</simple>
            </setBody>
        </route>
        <route id="_addbook">
            <from id="_from4" uri="direct:addbook"/>
            <log id="_log3" message="adding book data,id: ${body[0].id} title: ${body[0].title}, author: ${body[0].author}, stock: ${body[0].stock}"/>
            <to id="_to3" uri="sql:insert into lib_book(id,title, author, stock) values(:#${body[0].id},:#${body[0].title}, :#${body[0].author}, :#${body[0].stock})?dataSource=odsCommonsDS"/>
            <setBody id="_setBody3">
                <simple>${body[0].title} sucessfully adding book</simple>
            </setBody>
        </route>
    </camelContext>
</blueprint>
